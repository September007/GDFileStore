cmake_minimum_required(VERSION 3.20.0)
# Enable C++20
set(CMAKE_CXX_STANDARD 20)
# Set C++20 directories
#add_compile_options(-isystem /usr/include/c++/9)
# vcpkg <--
if(DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
  set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
      CACHE STRING "")
endif()
#set (CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} "$ENV{VCPKG_ROOT}/installed/x64-linux/share/GTest")
message("vcpkg root is ${CMAKE_TOOLCHAIN_FILE}")
if(DEFINED ENV{VCPKG_DEFAULT_TRIPLET} AND NOT DEFINED VCPKG_TARGET_TRIPLET)
  set(VCPKG_TARGET_TRIPLET "$ENV{VCPKG_DEFAULT_TRIPLET}" CACHE STRING "")
endif()
#set(GTest_DIR /usr/local/vcpkg/installed/x64-linux/share/GTest)
# parse regex_path
function( parse_regex_path return_set regex_path)
    set(regex_path ${regex_path} ${ARGN})
    file(GLOB SourceFiles ${regex_path})
    set(${return_set} )
    foreach(whom ${SourceFiles})
        STRING(REGEX REPLACE ".+/(.+)\\..*" "\\1" FILE_NAME  ${whom})
        set(${return_set} ${${return_set}} ${whom})
    endforeach()
    set(${return_set} ${${return_set}} CACHE STRING "seems like only cache varible can stay alive out of function scope" )
   # message("return_set:${${return_set}}")
   # message("regex_path:${regex_path}")
    
endfunction()
 

Project(GDFileStore)
set(lib_dirs GDFileStore.cpp)
add_library(GDFileStore ${lib_dirs} "test/test_main.cpp")
# 
add_compile_definitions(GDVERSION=1 LOCAL_VERSION=1 MIGRATED_VERSION=2)
include_directories( ./test . ./deps "$ENV{VCPKG_ROOT}/installed/${VCPKG_TARGET_TRIPLET}/include")
option(test_on "will build tests" ON)

# import gtest for test
find_package(GTest CONFIG REQUIRED)
find_package(Boost REQUIRED  )
find_package(spdlog CONFIG REQUIRED)
if(test_on)
    parse_regex_path(tests_path "./test/*.cpp")
   # message("tests:${tests_path}")
    foreach(test ${tests_path})
        STRING(REGEX REPLACE ".+/(.+)\\..*" "\\1" TestName  ${test})
        # avoid empty test_main
        if(${TestName} MATCHES "test_main")
            continue()
        endif()
        add_executable(${TestName} ${test} "./test/test_main.cpp" "test/test_main.cpp")
        target_link_libraries(${TestName} 
            PUBLIC GTest::gmock GTest::gtest GTest::gmock_main GTest::gtest_main
            PRIVATE spdlog::spdlog spdlog::spdlog_header_only)
    endforeach()
    # 
    list(LENGTH tests_path tests_count)
    if(tests_count GREATER 1)# with test_main
        add_executable(all_tests ${tests_path} "./test/test_main.cpp" "test/test_main.cpp")
        target_link_libraries(all_tests 
            PUBLIC GTest::gmock GTest::gtest GTest::gmock_main GTest::gtest_main
            PRIVATE spdlog::spdlog spdlog::spdlog_header_only)
    endif()
endif()